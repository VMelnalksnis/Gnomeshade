# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool: Default

trigger:
  branches:
    include:
    - master

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 5.0'
      inputs:
        version: '5.0.x'
        packageType: sdk
    
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: restore
        projects: '$(solution)'
        includeNuGetOrg: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Build solution - $(buildConfiguration)'
      inputs:
        command: build
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: FileTransform@1
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)'
        fileType: 'json'
        targetFiles: '**/appsettings.json'
    
    - task: DotNetCoreCLI@2
      displayName: 'Install .NET Core tools from local manifest'
      inputs:
        command: custom
        custom: tool
        arguments: 'restore'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run units tests - $(buildConfiguration)'
      inputs:
        command: test
        projects: '**/*.Tests.csproj'
        arguments: '--no-build --configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
        publishTestResults: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests - $(buildConfiguration)'
      inputs:
        command: test
        projects: '**/*.Tests.Integration.csproj'
        arguments: '--no-build --configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
        publishTestResults: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Create code coverage report'
      inputs:
        command: custom
        custom: tool
        arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'