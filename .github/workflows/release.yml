name: Release

on:
  push:
    branches: [ master ]
    tags: [ v*.*.* ]
    paths-ignore:
      - '**.md'

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      matrix:
        project:
          - Gnomeshade.Desktop.Installer
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-dotnet@v3.0.3
      - uses: microsoft/setup-msbuild@v1.1

      - run: $env:BUILD_TAG = "-nightly"
        if: ${{ !(startsWith(github.ref, 'refs/tags/')) }}

      - run: $env:Path += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"

      - name: Cache NuGet packages
        uses: actions/cache@v3.2.3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - run: dotnet restore --locked-mode /p:Configuration="Release"
      - name: Publish project
        id: publish
        run: deployment/build.ps1 ${{ matrix.project }}
        env:
          BUILD_NUMBER: ${{ github.run_number }}

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ steps.publish.outputs.artifact-name }}
          path: ${{ steps.publish.outputs.artifact }}

  build-linux:
    strategy:
      matrix:
        project:
          - Gnomeshade.Desktop
          - Gnomeshade.WebApi
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-dotnet@v3.0.3
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'source/Gnomeshade.WebApi/Node/package-lock.json'

      - run: echo "BUILD_TAG=-nightly"
        if: ${{ !(startsWith(github.ref, 'refs/tags/')) }}

      - name: Cache NuGet packages
        uses: actions/cache@v3.2.3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Publish project
        id: publish
        run: >
          deployment/publish.sh
          "${{ matrix.project }}"
          "linux-x64"
          "${{ github.run_number }}"
          "-nightly"

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ steps.publish.outputs.artifact-name }}
          path: ${{ steps.publish.outputs.artifact }}

  build-deb:
    name: Build debian package
    needs: build-linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/download-artifact@v3.0.2
        id: download
        with:
          name: Gnomeshade.WebApi_linux-x64.zip

      - name: Build debian package
        run: >
          deployment/debian.sh
          "${{ steps.download.outputs.download-path }}/Gnomeshade.WebApi_linux-x64.zip"
          "${{ github.run_number }}"

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: Gnomeshade.WebApi_linux-x64.deb
          path: "**/*.deb"

  nuget:
    name: Publish NuGet packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-dotnet@v3.0.3

      - name: Cache NuGet packages
        uses: actions/cache@v3.2.3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Pack package
        id: pack
        run: deployment/pack-nightly.sh "Gnomeshade.WebApi.Client" "${{ github.run_number }}" "${{ github.ref }}"

      - name: Push package to GitHub
        run: >
          dotnet nuget push "${{ steps.pack.outputs.artifact }}"
          --api-key ${{ secrets.GITHUB_TOKEN }}
          --source https://nuget.pkg.github.com/VMelnalksnis/index.json

      - name: Push package to NuGet
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: >
          dotnet nuget push "${{ steps.pack.outputs.artifact }}"
          --api-key ${{ secrets.NUGET_KEY }}
          --source https://api.nuget.org/v3/index.json

  docker:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: >
          docker build
          --tag ghcr.io/vmelnalksnis/gnomeshade:nightly
          --build-arg "BUILD_NUMBER=${{ github.run_number }}"
          ./

      - run: docker push ghcr.io/vmelnalksnis/gnomeshade:nightly

  deploy-demo:
    name: Deploy demo app
    needs: build-linux
    runs-on: ubuntu-latest
    env:
      AZURE_APP_NAME: gnomeshade-demo
      AZURE_APP_DOMAIN: 'https://gnomeshade-demo.azurewebsites.net/'
    steps:
      - uses: actions/download-artifact@v3.0.2
        id: download
        with:
          name: Gnomeshade.WebApi_linux-x64.zip

      - run: unzip Gnomeshade.WebApi_linux-x64.zip
      - run: rm Gnomeshade.WebApi_linux-x64.zip

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: '.'

      - uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_APP_NAME }}
          app-settings-json: |
            [
                {
                    "name": "ConnectionStrings__Gnomeshade",
                    "value": "Data Source=/tmp/gnomeshade.db",
                    "slotSetting": false
                },
                {
                    "name": "Database__Provider",
                    "value": "Sqlite",
                    "slotSetting": false
                },
                {
                    "name": "Jwt__Secret",
                    "value": "${{ secrets.DEMO_JWT_SECRET }}",
                    "slotSetting": false
                },
                {
                    "name": "Jwt__ValidAudience",
                    "value": "${{ env.AZURE_APP_DOMAIN }}",
                    "slotSetting": false
                },
                {
                    "name": "Jwt__ValidIssuer",
                    "value": "${{ env.AZURE_APP_DOMAIN }}",
                    "slotSetting": false
                }
            ]

  update-nightly:
    name: Update nightly release
    needs:
      - build-windows
      - build-linux
      - build-deb
    runs-on: ubuntu-latest
    if: ${{ !(startsWith(github.ref, 'refs/tags/')) }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        id: download
        with:
          path: artifacts

      - name: Upload artifact to nightly release
        uses: pyTooling/Actions/releaser/composite@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          rm: true
          files: |
            ${{ steps.download.outputs.download-path }}/**/*.zip
            ${{ steps.download.outputs.download-path }}/**/*.deb
            ${{ steps.download.outputs.download-path }}/**/*.msi

  create-release:
    name: Create release
    needs:
      - build-windows
      - build-linux
      - build-deb
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        id: download
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v0.1.15
        with:
          draft: true
          prerelease: false
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ steps.download.outputs.download-path }}/**/*.zip
            ${{ steps.download.outputs.download-path }}/**/*.deb
            ${{ steps.download.outputs.download-path }}/**/*.msi
