name: build and test

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-dotnet@v3.0.3
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'source/Gnomeshade.WebApi/Node/package-lock.json'

      - name: Cache NuGet packages
        uses: actions/cache@v3.0.11
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.2.6
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('**/WebserverSetup.cs') }}

      - run: ./deployment/test.sh
        env:
          Nordigen:SecretId: ${{ secrets.NORDIGEN_SECRET_ID }}
          Nordigen:SecretKey: ${{ secrets.NORDIGEN_SECRET_KEY }}
          Serilog:MinimumLevel: Warning

      - name: Gather Code Coverage
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build-deb:
    name: Build debian package
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-dotnet@v3.0.3
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'source/Gnomeshade.WebApi/Node/package-lock.json'

      - run: echo "BUILD_TAG=-test"

      - name: Cache NuGet packages
        uses: actions/cache@v3.0.11
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Publish project
        id: publish
        run: deployment/publish.sh "Gnomeshade.WebApi" "linux-x64" "${{ github.run_number }}" "-test"

      - name: Build debian package
        run: deployment/debian.sh "${{ steps.publish.outputs.artifact }}" "${{ github.run_number }}"

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: Gnomeshade.WebApi_linux-x64.deb
          path: "**/*.deb"

  ansible:
    name: Test ansible role
    runs-on: ubuntu-20.04
    needs: build-deb
    strategy:
      matrix:
        distro:
          - debian10
          - debian11
          - ubuntu1804
          - ubuntu2004
          - ubuntu2204
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/download-artifact@v3.0.1
        id: download
        with:
          name: Gnomeshade.WebApi_linux-x64.deb

      - run: mv ${{ steps.download.outputs.download-path }}/gnomeshade.deb ./deployment/ansible/gnomeshade/molecule/default/gnomeshade.deb

      - uses: gofrolist/molecule-action@v2.3.5
        with:
          molecule_working_dir: './deployment/ansible/gnomeshade'
        env:
          MOLECULE_DISTRO: ${{ matrix.distro }}

  docker:
    name: Test docker container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - run: >
          docker build
          --tag ghcr.io/vmelnalksnis/gnomeshade:test
          --build-arg "BUILD_NUMBER=${{ github.run_number }}"
          ./
      - run: docker run --name test -d -p 8000:80 ghcr.io/vmelnalksnis/gnomeshade:test
      - run: wget --tries=10 --retry-connrefused --waitretry=1 --timeout=15 "http://localhost:8000/health"
      - run: >
          [[ $(cat health) = "Healthy" ]] || exit 1
      - run: >
          curl
          --header "Content-Type: application/json"
          --request POST
          --data '{"username":"john.doe", "password": "Password123!", "email": "john.doe@example.com", "fullName": "John Doe" }'
          http://localhost:8000/Authorization/Register
      - run: docker logs test
        if: always()

  resharper:
    name: Resharper
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-dotnet@v3.0.3
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'source/Gnomeshade.WebApi/Node/package-lock.json'

      - name: Cache NuGet packages
        uses: actions/cache@v3.0.11
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - run: ./deployment/build.sh

      - name: ReSharper annotations
        uses: VMelnalksnis/resharper-inspect-action@v0.2.5
        with:
          solution: Gnomeshade.sln
          resharper-version: 2022.1.2
          treat-warnings-as-errors: true
