name: Nightly Release

on:
  push:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ]
        runtime: [ win10-x64 ]
        project: [ Gnomeshade.Interfaces.Desktop ]
        publish_script: [ deployment/publish.ps1 ]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            project: Gnomeshade.Interfaces.WebApi
            publish_script: deployment/publish.sh

          - os: ubuntu-latest
            runtime: linux-x64
            project: Gnomeshade.Interfaces.Desktop
            publish_script: deployment/publish.sh

    name: Build
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.203

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{ matrix.runtime }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.runtime }}-nuget-

      - run: chmod +x ${{ matrix.publish_script }}
        if: matrix.os == 'ubuntu-latest'

      - name: Publish project
        id: publish
        run: >
          ${{ matrix.publish_script }}
          "${{ matrix.project }}"
          "${{ matrix.runtime }}"
          "${{ github.run_number }}"
          "-nightly"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.publish.outputs.artifact-name }}
          path: ${{ steps.publish.outputs.artifact }}
  
  build-deb:
    name: Build debian package
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
          
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: Gnomeshade.Interfaces.WebApi_linux-x64.zip

      - name: Build debian package
        run: >
          deployment/debian.sh
          "${{ steps.download.outputs.download-path }}"
          "${{ github.run_number }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Gnomeshade.Interfaces.WebApi_linux-x64.deb
          path: "/**/*.deb"
  
  create-release:
    name: Create release
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        id: download
        with:
          path: artifacts

      - name: Upload artifact to releases
        uses: pyTooling/Actions/releaser/composite@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          rm: false
          files: |
            ${{ steps.download.outputs.download-path }}/**/*.zip
            ${{ steps.download.outputs.download-path }}/**/*.deb
