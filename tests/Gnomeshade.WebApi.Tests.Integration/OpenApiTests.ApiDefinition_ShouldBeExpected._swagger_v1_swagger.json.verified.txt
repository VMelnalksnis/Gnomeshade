{
  openapi: 3.0.1,
  info: {
    title: Gnomeshade API,
    description: Personal finance tracking API,
    license: {
      name: AGPL-3.0-or-later,
      url: https://www.gnu.org/licenses/agpl-3.0.txt
    },
    version: 1
  },
  paths: {
    /api/v1/Access: {
      get: {
        tags: [
          Access
        ],
        summary: Gets all accesses.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Access
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Access
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Access
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Accounts: {
      get: {
        tags: [
          Accounts
        ],
        summary: Gets all accounts.,
        responses: {
          200: {
            description: Successfully got all accounts.,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Account
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Account
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Account
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Accounts
        ],
        summary: Creates a new account.,
        requestBody: {
          description: Information for creating the account.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Accounts/{id}: {
      get: {
        tags: [
          Accounts
        ],
        summary: Finds an account with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id by which to search for an account.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Account
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Account
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Account
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Accounts
        ],
        summary: Creates a new account or replaces an existing  one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the account.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The account to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/AccountCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Accounts
        ],
        summary: Deletes the entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Accounts/{id}/Currencies: {
      post: {
        tags: [
          Accounts
        ],
        summary: Adds a currency to an existing account.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the account to which to add the currency.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The currency which to add to the account.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/AccountInCurrencyCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/AccountInCurrencyCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/AccountInCurrencyCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Accounts/{id}/Currencies/{currencyId}: {
      delete: {
        tags: [
          Accounts
        ],
        summary: Removes a currency from an existing account.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the account from which to remove the currency.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: currencyId,
            in: path,
            description: The id of the account in currency which to remove.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Accounts/{id}/Balance: {
      get: {
        tags: [
          Accounts
        ],
        summary: Gets the current balance of the specified account.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the account for which to get the balance for.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Balance
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Balance
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Balance
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Authentication/Login: {
      post: {
        tags: [
          Authentication
        ],
        summary: Authenticates a user using the specified login information.,
        requestBody: {
          description: Information for logging in.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/Login
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/Login
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/Login
              }
            }
          }
        },
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/LoginResponse
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/LoginResponse
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/LoginResponse
                }
              }
            }
          },
          401: {
            description: Unauthorized,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          }
        }
      }
    },
    /api/v1/Authentication/Logout: {
      post: {
        tags: [
          Authentication
        ],
        summary: Logs out the currently signed in user.,
        responses: {
          204: {
            description: No Content
          },
          500: {
            description: Internal Server Error
          }
        }
      }
    },
    /api/v1/Categories: {
      get: {
        tags: [
          Categories
        ],
        summary: Gets all categories.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Category
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Category
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Category
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Categories
        ],
        summary: Creates a new category, or replaces and existing one if one exists with the specified id.,
        requestBody: {
          description: The category to create or update.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Categories/{id}: {
      get: {
        tags: [
          Categories
        ],
        summary: Gets the category with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id by which to search for the category.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Category
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Category
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Category
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Categories
        ],
        summary: Creates a new category, or replaces and existing one if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the category.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The category to create or update.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/CategoryCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Categories
        ],
        summary: Deletes the specified category.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the category to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Counterparties/{id}: {
      get: {
        tags: [
          Counterparties
        ],
        summary: Gets the counterparty with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id by which to search for the counterparty.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Counterparties
        ],
        summary: Creates a new counterparty, or replaces and existing one if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the counterparty.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The counterparty to create or update.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Counterparties
        ],
        summary: Deletes the entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Counterparties/me: {
      get: {
        tags: [
          Counterparties
        ],
        summary: Gets the counterparty that represents the current user.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Counterparty
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Counterparties: {
      get: {
        tags: [
          Counterparties
        ],
        summary: Gets all counterparties.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Counterparty
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Counterparty
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Counterparty
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Counterparties
        ],
        summary: Creates a new counterparty.,
        requestBody: {
          description: The counterparty to create.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/CounterpartyCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Counterparties/{targetId}/Merge/{sourceId}: {
      post: {
        tags: [
          Counterparties
        ],
        summary: Merges one counterparty into another.,
        parameters: [
          {
            name: targetId,
            in: path,
            description: The id of the counterparty in to which to merge.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: sourceId,
            in: path,
            description: The id of the counterparty which to merge into the other one.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Currencies: {
      get: {
        tags: [
          Currencies
        ],
        summary: Gets all currencies.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Currency
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Currency
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Currency
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/ExternalAuthentication/SocialRegister: {
      post: {
        tags: [
          ExternalAuthentication
        ],
        summary: Registers or authenticates a user using and OIDC provider.,
        responses: {
          204: {
            description: No Content
          },
          302: {
            description: Found
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          }
        }
      }
    },
    /api/v1/Health: {
      get: {
        tags: [
          Health
        ],
        summary: Gets the current status of the API.,
        responses: {
          200: {
            description: The API is either fully operational or degraded.,
            content: {
              text/plain: {
                schema: {
                  type: string
                }
              },
              application/json: {
                schema: {
                  type: string
                }
              },
              text/json: {
                schema: {
                  type: string
                }
              }
            }
          },
          503: {
            description: The API is not operational.,
            content: {
              text/plain: {
                schema: {
                  type: string
                }
              },
              application/json: {
                schema: {
                  type: string
                }
              },
              text/json: {
                schema: {
                  type: string
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          }
        }
      }
    },
    /api/v1/Iso: {
      post: {
        tags: [
          Iso
        ],
        summary: Imports transactions from an ISO 20022 Bank-To-Customer Account Report v02.,
        requestBody: {
          content: {
            multipart/form-data: {
              schema: {
                required: [
                  Report,
                  TimeZone
                ],
                type: object,
                properties: {
                  Report: {
                    type: string,
                    description: The ISO20022 report content.,
                    format: binary
                  },
                  TimeZone: {
                    type: string,
                    description: The timezone which will be assumed for all unspecified dates in the report.
                  }
                }
              },
              encoding: {
                Report: {
                  style: form
                },
                TimeZone: {
                  style: form
                }
              }
            }
          }
        },
        responses: {
          200: {
            description: Transactions were successfully imported.,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/AccountReportResult
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/AccountReportResult
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/AccountReportResult
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Links: {
      get: {
        tags: [
          Links
        ],
        summary: Gets all links.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Links
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Links/{id}: {
      get: {
        tags: [
          Links
        ],
        summary: Gets the specified link.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the link to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Link
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Link
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Link
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Links
        ],
        summary: Creates a new link or replaces an existing  one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the link.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The link to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/LinkCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Links
        ],
        summary: Deletes the specified link.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the link to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Loans/{id}: {
      get: {
        tags: [
          Loans
        ],
        summary: Gets the specified loan.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the loan to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: Successfully got the loan.,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Loan
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Loan
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Loan
                }
              }
            }
          },
          404: {
            description: Loan with the specified id does not exist.,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      },
      put: {
        tags: [
          Loans
        ],
        summary: Creates a new loan or replaces an existing one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the loan.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The loan to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: A new loan was created.,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: An existing loan was replaced.
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          },
          404: {
            description: The specified transaction does not exist.
          }
        },
        deprecated: true
      },
      delete: {
        tags: [
          Loans
        ],
        summary: Deletes the specified loan.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the loan to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: Loan was successfully deleted.
          },
          404: {
            description: Loan with the specified id does not exist.,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Loan cannot be deleted because some other entity is still referencing it.,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      }
    },
    /api/v1/Loans: {
      get: {
        tags: [
          Loans
        ],
        summary: Gets all loans.,
        responses: {
          200: {
            description: Successfully got all loans.,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      },
      post: {
        tags: [
          Loans
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/LoanCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Nordigen: {
      get: {
        tags: [
          Nordigen
        ],
        summary: Gets all institutions that operate within the specified country.,
        parameters: [
          {
            name: countryCode,
            in: query,
            description: An ISO 3166 two-character country code.,
            schema: {
              type: string
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    type: string
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    type: string
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    type: string
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Nordigen/{id}: {
      post: {
        tags: [
          Nordigen
        ],
        summary: Imports all transactions from the specified institution.,
        parameters: [
          {
            name: id,
            in: path,
            description: The institution id.,
            required: true,
            schema: {
              type: string
            }
          },
          {
            name: timeZone,
            in: query,
            required: true,
            schema: {
              type: string
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/AccountReportResult
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/AccountReportResult
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/AccountReportResult
                  }
                }
              }
            }
          },
          302: {
            description: Found
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Owners: {
      get: {
        tags: [
          Owners
        ],
        summary: Gets all owners.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Owner
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Owner
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Owner
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Owners
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Owners/{id}: {
      put: {
        tags: [
          Owners
        ],
        summary: Creates a new owner or replaces an existing one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the owner.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The owner to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/OwnerCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Owners
        ],
        summary: Deletes the specified owner.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the owner to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      get: {
        tags: [
          Owners
        ],
        summary: Gets the specified entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Ownerships: {
      get: {
        tags: [
          Ownerships
        ],
        summary: Gets all ownerships.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Ownership
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Ownership
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Ownership
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Ownerships
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Ownerships/{id}: {
      put: {
        tags: [
          Ownerships
        ],
        summary: Creates a new ownership or replaces an existing one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the ownership.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The ownership to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/OwnershipCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Ownerships
        ],
        summary: Deletes the specified ownership.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the ownership to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      get: {
        tags: [
          Ownerships
        ],
        summary: Gets the specified entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Paperless: {
      post: {
        tags: [
          Paperless
        ],
        summary: Adds purchases from the document from linkId to the specified transaction.,
        parameters: [
          {
            name: transactionId,
            in: query,
            description: The id of the transaction to which to add the purchases.,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: linkId,
            in: query,
            description: The id of the link from which to get a document, from which then to parse purchases from.,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          }
        }
      }
    },
    /api/v1/Products/{id}: {
      get: {
        tags: [
          Products
        ],
        summary: Gets the specified product.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the product to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Product
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Product
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Product
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Products
        ],
        summary: Creates a new product or replaces an existing one if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the product.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The product to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Products
        ],
        summary: Deletes the entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Products: {
      get: {
        tags: [
          Products
        ],
        summary: Gets all products.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Product
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Product
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Product
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Products
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/ProductCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Products/{id}/Purchases: {
      get: {
        tags: [
          Products
        ],
        summary: Gets all purchases of the specified product.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the product for which to get all the purchases.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Projects/{id}: {
      get: {
        tags: [
          Projects
        ],
        summary: Gets the project with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id by which to search for the project.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Project
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Project
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Project
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Projects
        ],
        summary: Creates a new project, or replaces and existing one if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the project.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Projects
        ],
        summary: Deletes the specified project.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the project to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Projects: {
      get: {
        tags: [
          Projects
        ],
        summary: Gets all projects.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Project
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Project
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Project
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Projects
        ],
        summary: Creates a new project.,
        requestBody: {
          description: The project to create.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/ProjectCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Projects/{id}/Purchases: {
      get: {
        tags: [
          Projects
        ],
        summary: Gets all purchases that are a part of the specified project.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the project for which to get all the purchases.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Projects/{id}/Purchases/{purchaseId}: {
      put: {
        tags: [
          Projects
        ],
        summary: Adds the specified purchase to the specified project.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the project to which to add the purchase.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: purchaseId,
            in: path,
            description: The id of the purchase which to add to the project.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Projects
        ],
        summary: Removes the specified purchase to the specified project.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the project from which to remove the purchase.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: purchaseId,
            in: path,
            description: The id of the purchase which to remove from the project.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Purchases/{id}: {
      get: {
        tags: [
          Purchases
        ],
        summary: Gets the specified purchase.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the purchase to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Purchase
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Purchase
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Purchase
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Purchases
        ],
        summary: Creates a new purchase or replaces an existing one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the purchase.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Purchases
        ],
        summary: Deletes the specified purchase.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the purchase to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Purchases: {
      get: {
        tags: [
          Purchases
        ],
        summary: Gets all purchases.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Purchases
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/PurchaseCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all transactions.,
        responses: {
          200: {
            description: Successfully got all transactions.,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Transactions
        ],
        summary: Creates a new transaction.,
        requestBody: {
          description: Information for creating the transaction.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{id}: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets the specified transaction.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Transaction
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Transaction
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Transaction
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Transactions
        ],
        summary: Creates a new transaction or replaces an existing  one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The transaction to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/TransactionCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Transactions
        ],
        summary: Deletes the specified transaction.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{id}/Details: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets the specified transaction with all details.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/DetailedTransaction
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/DetailedTransaction
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/DetailedTransaction
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      }
    },
    /api/v1/Transactions/Details: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all transactions.,
        parameters: [
          {
            name: From,
            in: query,
            description: The start of the date range.,
            schema: {
              $ref: #/components/schemas/Instant
            }
          },
          {
            name: To,
            in: query,
            description: The end of the date range.,
            schema: {
              $ref: #/components/schemas/Instant
            }
          }
        ],
        responses: {
          200: {
            description: Successfully got all transactions.,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/DetailedTransaction
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/DetailedTransaction
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/DetailedTransaction
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      }
    },
    /api/v1/Transactions/{transactionId}/Links: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all links for the specified transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction for which to get the links.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Link
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{transactionId}/Links/{id}: {
      put: {
        tags: [
          Transactions
        ],
        summary: Adds the specified link to a transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction to which to add the link.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: id,
            in: path,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Transactions
        ],
        summary: Removes the specified link from a transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction from which to remove the link.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: id,
            in: path,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{transactionId}/Transfers: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all transfers for the specified transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction for which to get transfers.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{transactionId}/Purchases: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all purchases for the specified transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction for which to get all the purchases.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Purchase
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{transactionId}/Loans: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all loans for the specified transaction.,
        parameters: [
          {
            name: transactionId,
            in: path,
            description: The id of the transaction for which to get all the loans.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      }
    },
    /api/v1/Transactions/Loans: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all loans issued or received by the specified counterparty.,
        parameters: [
          {
            name: counterpartyId,
            in: query,
            description: The id of the counterparty for which to get all the loans for.,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: Successfully got all loans.,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Loan
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        },
        deprecated: true
      }
    },
    /api/v1/Transactions/{targetId}/Merge: {
      post: {
        tags: [
          Transactions
        ],
        summary: Merges one transaction into another.,
        parameters: [
          {
            name: targetId,
            in: path,
            description: The id of the transaction in to which to merge.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: sourceIds,
            in: query,
            description: The ids of the transactions which to merge into the target transactions.,
            schema: {
              minItems: 1,
              type: array,
              items: {
                type: string,
                format: uuid
              }
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{id}/Related: {
      get: {
        tags: [
          Transactions
        ],
        summary: Gets all related transactions for the specified transaction.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction for which to get related transactions.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transaction
                  }
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transactions/{id}/Related/{relatedId}: {
      post: {
        tags: [
          Transactions
        ],
        summary: Adds a related transaction.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction to which to add the relation.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: relatedId,
            in: path,
            description: The id of the related transaction.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Transactions
        ],
        summary: Removes a related transaction.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transaction from which to remove the relation.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          },
          {
            name: relatedId,
            in: path,
            description: The id of the related transaction.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transfers/{id}: {
      get: {
        tags: [
          Transfers
        ],
        summary: Gets the specified transfer.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transfer to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Transfer
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Transfer
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Transfer
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Transfers
        ],
        summary: Creates a new transfer or replaces an existing one, if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transfer.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Transfers
        ],
        summary: Deletes the specified transfer.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the transfer to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Transfers: {
      get: {
        tags: [
          Transfers
        ],
        summary: Gets all transfers.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Transfer
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Transfers
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/TransferCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Units/{id}: {
      get: {
        tags: [
          Units
        ],
        summary: Gets the specified unit.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the unit to get.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/Unit
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/Unit
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/Unit
                }
              }
            }
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      put: {
        tags: [
          Units
        ],
        summary: Creates a new unit or replaces an existing one if one exists with the specified id.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the unit.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        requestBody: {
          description: The unit to create or replace.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            }
          },
          required: true
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          204: {
            description: No Content
          },
          403: {
            description: Forbidden,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      delete: {
        tags: [
          Units
        ],
        summary: Deletes the entity.,
        parameters: [
          {
            name: id,
            in: path,
            description: The id of the entity to delete.,
            required: true,
            schema: {
              type: string,
              format: uuid
            }
          }
        ],
        responses: {
          204: {
            description: No Content
          },
          404: {
            description: Not Found,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          400: {
            description: Bad request,
            content: {
              application/problem+json: {
                schema: {
                  type: object,
                  properties: {
                    type: {
                      type: string,
                      nullable: true
                    },
                    title: {
                      type: string,
                      nullable: true
                    },
                    status: {
                      type: integer,
                      format: int32,
                      default: 400,
                      nullable: true
                    },
                    detail: {
                      type: string,
                      nullable: true
                    },
                    instance: {
                      type: string,
                      nullable: true
                    },
                    errors: {
                      type: object,
                      additionalProperties: {
                        type: array,
                        items: {
                          type: string
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Units: {
      get: {
        tags: [
          Units
        ],
        summary: Gets all units.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Unit
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Unit
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/Unit
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      },
      post: {
        tags: [
          Units
        ],
        summary: Creates a new entity.,
        requestBody: {
          description: Information for creating the entity.,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            },
            text/json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            },
            application/*+json: {
              schema: {
                $ref: #/components/schemas/UnitCreation
              }
            }
          }
        },
        responses: {
          201: {
            description: Created,
            content: {
              text/plain: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              application/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              },
              text/json: {
                schema: {
                  type: string,
                  format: uuid
                }
              }
            }
          },
          409: {
            description: Conflict,
            content: {
              text/plain: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              application/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              },
              text/json: {
                schema: {
                  $ref: #/components/schemas/ProblemDetails
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    },
    /api/v1/Users: {
      get: {
        tags: [
          Users
        ],
        summary: Gets all users.,
        responses: {
          200: {
            description: OK,
            content: {
              text/plain: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/UserModel
                  }
                }
              },
              application/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/UserModel
                  }
                }
              },
              text/json: {
                schema: {
                  type: array,
                  items: {
                    $ref: #/components/schemas/UserModel
                  }
                }
              }
            }
          },
          500: {
            description: Internal Server Error
          },
          401: {
            description: Unauthorized
          }
        }
      }
    }
  },
  components: {
    schemas: {
      Access: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the access.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the access.
          }
        },
        additionalProperties: false,
        description: The level of access a user can have to a group of resources.
      },
      Account: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the account.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of this account.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user which created this account.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user which last modified this account.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the account.
          },
          counterpartyId: {
            type: string,
            description: The id of the counterparty to which this account belongs to.,
            format: uuid
          },
          preferredCurrencyId: {
            type: string,
            description: The id of the preferred currency of the account.,
            format: uuid
          },
          bic: {
            type: string,
            description: The BIC (Business Identifier Code) of the account.,
            nullable: true
          },
          iban: {
            type: string,
            description: The IBAN (International Bank Account Number) of the account.,
            nullable: true
          },
          accountNumber: {
            type: string,
            description: The account number of the account.,
            nullable: true
          },
          currencies: {
            type: array,
            items: {
              $ref: #/components/schemas/AccountInCurrency
            },
            description: A collection of currencies available for the account.
          }
        },
        additionalProperties: false,
        description: An account in one or multiple currencies, which belongs to a counterparty.
      },
      AccountCreation: {
        required: [
          counterpartyId,
          currencies,
          name,
          preferredCurrencyId
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the account.
          },
          counterpartyId: {
            type: string,
            description: The id of the counterparty to which this account belongs to.,
            format: uuid
          },
          preferredCurrencyId: {
            type: string,
            description: The id of the preferred currency of the account.,
            format: uuid
          },
          bic: {
            type: string,
            description: The BIC (Business Identifier Code) of the account.,
            nullable: true
          },
          iban: {
            type: string,
            description: The IBAN (International Bank Account Number) of the account.,
            nullable: true
          },
          accountNumber: {
            type: string,
            description: The account number of the account.,
            nullable: true
          },
          currencies: {
            minItems: 1,
            type: array,
            items: {
              $ref: #/components/schemas/AccountInCurrencyCreation
            },
            description: A collection of currencies available for the account.
          }
        },
        additionalProperties: false,
        description: The information needed to create a new account.
      },
      AccountInCurrency: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the account in currency.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of this account in currency.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user which created this account in currency.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user which last modified this account in currency.,
            format: uuid
          },
          currencyId: {
            type: string,
            description: The id of the currency of the account in currency.,
            format: uuid
          },
          currencyAlphabeticCode: {
            type: string,
            description: The alphabetic code of the currency of the account in currency.
          }
        },
        additionalProperties: false,
        description: A single currency for a specific account.
      },
      AccountInCurrencyCreation: {
        required: [
          currencyId
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          currencyId: {
            type: string,
            description: The id of the currency to add to an account.,
            format: uuid
          }
        },
        additionalProperties: false,
        description: The information needed to add a currency to an account.
      },
      AccountReference: {
        type: object,
        properties: {
          created: {
            type: boolean,
            description: Whether or not the account was created during import.
          },
          account: {
            $ref: #/components/schemas/Account
          }
        },
        additionalProperties: false,
        description: A reference to an account that was used during import.
      },
      AccountReportResult: {
        type: object,
        properties: {
          userAccount: {
            $ref: #/components/schemas/Account
          },
          accountReferences: {
            type: array,
            items: {
              $ref: #/components/schemas/AccountReference
            },
            description: The accounts created or referenced during the import.
          },
          transferReferences: {
            type: array,
            items: {
              $ref: #/components/schemas/TransferReference
            },
            description: The transfers created or referenced during the import.
          },
          transactionReferences: {
            type: array,
            items: {
              $ref: #/components/schemas/TransactionReference
            },
            description: The transactions created or referenced during the import.
          }
        },
        additionalProperties: false,
        description: Summary of the report import.
      },
      Balance: {
        type: object,
        properties: {
          accountInCurrencyId: {
            type: string,
            description: The id of the Gnomeshade.WebApi.Models.Accounts.AccountInCurrency for which the balance was calculated for.,
            format: uuid
          },
          sourceAmount: {
            type: number,
            description: The total amount withdrawn from the account.,
            format: double
          },
          targetAmount: {
            type: number,
            description: The total amount deposited to the account.,
            format: double
          }
        },
        additionalProperties: false,
        description: Account balance in a single currency.
      },
      Category: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the category.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the category.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this category.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this category.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the category.
          },
          description: {
            type: string,
            description: The description of the category.,
            nullable: true
          },
          categoryId: {
            type: string,
            description: The id of the category to which the category belongs to.,
            format: uuid,
            nullable: true
          },
          linkedProductId: {
            type: string,
            description: The id of the linked product which represents this category in purchases.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: A keyword that can be assigned to other data, for example, transaction items.
      },
      CategoryCreation: {
        required: [
          name
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the category.
          },
          description: {
            type: string,
            description: The description of the category.,
            nullable: true
          },
          categoryId: {
            type: string,
            description: The id of the category to which the category belongs to.,
            format: uuid,
            nullable: true
          },
          linkProduct: {
            type: boolean,
            description: Whether to create a linked product for using this category in purchases.
          }
        },
        additionalProperties: false,
        description: Information needed to create a category.
      },
      Counterparty: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the counterparty.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of this counterparty.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user which created this counterparty.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user which last modified this counterparty.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the counterparty.
          }
        },
        additionalProperties: false,
        description: A party that participates in a financial transaction.
      },
      CounterpartyCreation: {
        required: [
          name
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the counterparty.
          }
        },
        additionalProperties: false,
        description: The information needed to create a new counterparty.
      },
      Currency: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the currency.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          name: {
            type: string,
            description: The name of the currency.
          },
          numericCode: {
            type: integer,
            description: The ISO 4217 three digit numeric code.,
            format: int32
          },
          alphabeticCode: {
            type: string,
            description: The ISO 4217 three letter alphabetic code.
          },
          minorUnit: {
            type: integer,
            description: The number of minor unit decimal places.,
            format: int32
          },
          official: {
            type: boolean,
            description: A value indicating whether this currency is listed in ISO 4217.
          },
          crypto: {
            type: boolean,
            description: A value indicating whether this currency is a cryptocurrency.
          },
          historical: {
            type: boolean,
            description: A value indicating whether this currency is no longer being used.
          },
          activeFrom: {
            $ref: #/components/schemas/Instant
          },
          activeUntil: {
            $ref: #/components/schemas/Instant
          }
        },
        additionalProperties: false,
        description: A currency used in transactions.
      },
      DetailedTransaction: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the transaction.,
            format: uuid
          },
          ownerId: {
            type: string,
            description: The id of the owner of the transaction.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this transaction.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this transaction.,
            format: uuid
          },
          description: {
            type: string,
            description: The description of the transaction.,
            nullable: true
          },
          importedAt: {
            $ref: #/components/schemas/Instant
          },
          imported: {
            type: boolean,
            description: Whether or not this transaction was imported.,
            readOnly: true
          },
          reconciledAt: {
            $ref: #/components/schemas/Instant
          },
          reconciled: {
            type: boolean,
            description: Whether or not this transaction was reconciled.,
            readOnly: true
          },
          refundedBy: {
            type: string,
            description: The id of the transaction that refunds this one.,
            format: uuid,
            nullable: true
          },
          refunded: {
            type: boolean,
            description: Whether or not this transaction was refunded.,
            readOnly: true
          },
          bookedAt: {
            $ref: #/components/schemas/Instant
          },
          valuedAt: {
            $ref: #/components/schemas/Instant
          },
          transfers: {
            type: array,
            items: {
              $ref: #/components/schemas/Transfer
            },
            description: All transfers in the transaction.
          },
          transferBalance: {
            type: number,
            description: The total balance of the transfers for the user.,
            format: double
          },
          purchases: {
            type: array,
            items: {
              $ref: #/components/schemas/Purchase
            },
            description: All the purchases in the transaction.
          },
          purchaseTotal: {
            type: number,
            description: The sum of all the prices from Gnomeshade.WebApi.V1.Transactions.DetailedTransaction.Purchases.,
            format: double
          },
          loans: {
            type: array,
            items: {
              $ref: #/components/schemas/Loan
            },
            description: All the loans in the transaction.
          },
          loanTotal: {
            type: number,
            description: The sum of all the amounts from Gnomeshade.WebApi.V1.Transactions.DetailedTransaction.Loans.,
            format: double
          },
          links: {
            type: array,
            items: {
              $ref: #/components/schemas/Link
            },
            description: All the links attached to the transaction.
          }
        },
        additionalProperties: false,
        description: A Gnomeshade.WebApi.Models.Transactions.Transaction with all sub-resources and additional details.
      },
      Instant: {
        type: string,
        additionalProperties: false,
        format: date-time
      },
      Link: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the link.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the link.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this link.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this link.,
            format: uuid
          },
          uri: {
            type: string,
            description: The unescaped canonical representation of the uniform resource identifier of the linked data.
          }
        },
        additionalProperties: false,
        description: A link to an external resource.
      },
      LinkCreation: {
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          uri: {
            type: string,
            description: The unescaped canonical representation of the uniform resource identifier of the linked data.,
            format: uri,
            nullable: true
          }
        },
        additionalProperties: false,
        description: Information needed to create a link.
      },
      Loan: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the loan.,
            format: uuid
          },
          ownerId: {
            type: string,
            description: The id of the owner of the loan.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this loan.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this loan.,
            format: uuid
          },
          transactionId: {
            type: string,
            description: The id of the the transaction this loan is a part of.,
            format: uuid
          },
          issuingCounterpartyId: {
            type: string,
            description: The id of the counterparty the gave (issued) the loan to Gnomeshade.WebApi.V1.Transactions.Loan.ReceivingCounterpartyId.,
            format: uuid
          },
          receivingCounterpartyId: {
            type: string,
            description: The id of the counterparty the received the loan from Gnomeshade.WebApi.V1.Transactions.Loan.IssuingCounterpartyId.,
            format: uuid
          },
          amount: {
            type: number,
            description: The amount that was loaned or payed back.,
            format: double
          },
          currencyId: {
            type: string,
            description: The id of the currency of the Gnomeshade.WebApi.V1.Transactions.Loan.Amount.,
            format: uuid
          }
        },
        additionalProperties: false,
        description: An amount that was loaned or payed back as a part of a transaction.
      },
      LoanCreation: {
        required: [
          amount,
          currencyId,
          issuingCounterpartyId,
          receivingCounterpartyId,
          transactionId
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          transactionId: {
            type: string,
            description: The id of the the transaction this loan is a part of.,
            format: uuid
          },
          issuingCounterpartyId: {
            type: string,
            description: The id of the counterparty the gave (issued) the loan to Gnomeshade.WebApi.V1.Transactions.Loan.ReceivingCounterpartyId.,
            format: uuid
          },
          receivingCounterpartyId: {
            type: string,
            description: The id of the counterparty the received the loan from Gnomeshade.WebApi.V1.Transactions.Loan.IssuingCounterpartyId.,
            format: uuid
          },
          amount: {
            type: number,
            description: The amount that was loaned or payed back.,
            format: double
          },
          currencyId: {
            type: string,
            description: The id of the currency of the Gnomeshade.WebApi.V1.Transactions.Loan.Amount.,
            format: uuid
          }
        },
        additionalProperties: false,
        description: Information needed to create a loan.
      },
      Login: {
        required: [
          password,
          username
        ],
        type: object,
        properties: {
          username: {
            minLength: 1,
            type: string,
            description: The username to log in with. Required.
          },
          password: {
            minLength: 1,
            type: string,
            description: The password to log in with. Required.
          }
        },
        additionalProperties: false,
        description: The information needed to log in.
      },
      LoginResponse: {
        type: object,
        properties: {
          token: {
            type: string,
            description: A JWT for authenticating the session.
          },
          validTo: {
            $ref: #/components/schemas/Instant
          }
        },
        additionalProperties: false,
        description: Information about the started session.
      },
      Owner: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the owner.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the owner.
          }
        },
        additionalProperties: false,
        description: A group of resources.
      },
      OwnerCreation: {
        required: [
          name
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the owner.
          }
        },
        additionalProperties: false,
        description: Information needed to create an owner.
      },
      Ownership: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the ownership.,
            format: uuid
          },
          ownerId: {
            type: string,
            description: The id of the owner.,
            format: uuid
          },
          userId: {
            type: string,
            description: The id of the user that has the access.,
            format: uuid
          },
          accessId: {
            type: string,
            description: The id of the access level.,
            format: uuid
          }
        },
        additionalProperties: false,
        description: Access rights for a user to a group of resources.
      },
      OwnershipCreation: {
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          userId: {
            type: string,
            description: The id of the user that has the access.,
            format: uuid
          },
          accessId: {
            type: string,
            description: The id of the access level.,
            format: uuid
          }
        },
        additionalProperties: false,
        description: Information needed to create an ownership.
      },
      ProblemDetails: {
        type: object,
        properties: {
          type: {
            type: string,
            nullable: true
          },
          title: {
            type: string,
            nullable: true
          },
          status: {
            type: integer,
            format: int32,
            nullable: true
          },
          detail: {
            type: string,
            nullable: true
          },
          instance: {
            type: string,
            nullable: true
          }
        }
      },
      Product: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the product.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the product.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this product.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this product.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the product.
          },
          sku: {
            type: string,
            description: The SKU (stock-keeping unit) of the product.,
            nullable: true
          },
          description: {
            type: string,
            description: The description of the product.,
            nullable: true
          },
          unitId: {
            type: string,
            description: The id of the unit in which the amounts of this product are expressed.,
            format: uuid,
            nullable: true
          },
          categoryId: {
            type: string,
            description: The id of the category of the product.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: A good or a service that can be exchanged during a transaction.
      },
      ProductCreation: {
        required: [
          name
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the product.
          },
          sku: {
            type: string,
            description: The SKU (stock-keeping unit) of the product.,
            nullable: true
          },
          description: {
            type: string,
            description: The description of the product.,
            nullable: true
          },
          unitId: {
            type: string,
            description: The id of the unit in which the amounts of this product are expressed.,
            format: uuid,
            nullable: true
          },
          categoryId: {
            type: string,
            description: The id of the category of the product.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: The information needed to create or update a product.
      },
      Project: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the project.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the project.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this project.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this project.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the project.
          },
          parentProjectId: {
            type: string,
            description: The id of the parent project.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: A grouping of purchases.
      },
      ProjectCreation: {
        required: [
          name
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the project.
          },
          parentProjectId: {
            type: string,
            description: The id of the parent project.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: The information needed to create or update a project.
      },
      Purchase: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the purchase.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the purchase.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this purchase.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this purchase.,
            format: uuid
          },
          transactionId: {
            type: string,
            description: The id of transaction this purchase is a part of.,
            format: uuid
          },
          price: {
            type: number,
            description: The amount paid to purchase an Gnomeshade.WebApi.Models.Transactions.Purchase.Amount of Gnomeshade.WebApi.Models.Transactions.Purchase.ProductId.,
            format: double
          },
          currencyId: {
            type: string,
            description: The id of the currency of Gnomeshade.WebApi.Models.Transactions.Purchase.Price.,
            format: uuid
          },
          productId: {
            type: string,
            description: The id of the purchased product.,
            format: uuid
          },
          amount: {
            type: number,
            description: The amount of Gnomeshade.WebApi.Models.Transactions.Purchase.ProductId that was purchased.,
            format: double
          },
          deliveryDate: {
            $ref: #/components/schemas/Instant
          },
          order: {
            type: integer,
            description: The order of the purchase within a transaction.,
            format: int32,
            nullable: true
          },
          projectIds: {
            type: array,
            items: {
              type: string,
              format: uuid
            },
            description: The ids of the projects that this purchase is a part of.
          }
        },
        additionalProperties: false,
        description: The act or an instance of buying of a Gnomeshade.WebApi.Models.Products.Product as a part of a Gnomeshade.WebApi.Models.Transactions.Transaction.
      },
      PurchaseCreation: {
        required: [
          amount,
          currencyId,
          price,
          productId,
          transactionId
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          transactionId: {
            type: string,
            description: The id of transaction this purchase is a part of.,
            format: uuid
          },
          price: {
            type: number,
            description: The amount paid to purchase an Gnomeshade.WebApi.Models.Transactions.Purchase.Amount of Gnomeshade.WebApi.Models.Transactions.Purchase.ProductId.,
            format: double
          },
          currencyId: {
            type: string,
            description: The id of the currency of Gnomeshade.WebApi.Models.Transactions.Purchase.Price.,
            format: uuid
          },
          productId: {
            type: string,
            description: The id of the purchased product.,
            format: uuid
          },
          amount: {
            type: number,
            description: The amount of Gnomeshade.WebApi.Models.Transactions.Purchase.ProductId that was purchased.,
            format: double
          },
          deliveryDate: {
            $ref: #/components/schemas/Instant
          },
          order: {
            type: integer,
            description: The order of the purchase within a transaction.,
            format: int32,
            nullable: true
          }
        },
        additionalProperties: false,
        description: Information needed to create a purchase.
      },
      Transaction: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the transaction.,
            format: uuid
          },
          ownerId: {
            type: string,
            description: The id of the owner of the transaction.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this transaction.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this transaction.,
            format: uuid
          },
          description: {
            type: string,
            description: The description of the transaction.,
            nullable: true
          },
          importedAt: {
            $ref: #/components/schemas/Instant
          },
          imported: {
            type: boolean,
            description: Whether or not this transaction was imported.,
            readOnly: true
          },
          reconciledAt: {
            $ref: #/components/schemas/Instant
          },
          reconciled: {
            type: boolean,
            description: Whether or not this transaction was reconciled.,
            readOnly: true
          },
          refundedBy: {
            type: string,
            description: The id of the transaction that refunds this one.,
            format: uuid,
            nullable: true
          },
          refunded: {
            type: boolean,
            description: Whether or not this transaction was refunded.,
            readOnly: true
          }
        },
        additionalProperties: false,
        description: A financial transaction during which funds can be transferred between multiple accounts.
      },
      TransactionCreation: {
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          description: {
            type: string,
            description: The description of the transaction.,
            nullable: true
          },
          reconciledAt: {
            $ref: #/components/schemas/Instant
          },
          importHash: {
            maxLength: 64,
            minLength: 64,
            type: string,
            description: SHA512 hash of the imported data.,
            format: byte,
            nullable: true
          },
          importedAt: {
            $ref: #/components/schemas/Instant
          },
          refundedBy: {
            type: string,
            description: The id of the transaction that refunds this one.,
            format: uuid,
            nullable: true
          }
        },
        additionalProperties: false,
        description: Information needed in order to create a transaction.
      },
      TransactionReference: {
        type: object,
        properties: {
          created: {
            type: boolean,
            description: Whether or not the transaction was created during import.
          },
          transaction: {
            $ref: #/components/schemas/Transaction
          }
        },
        additionalProperties: false,
        description: A reference to an transaction that was used during import.
      },
      Transfer: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the transfer.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the transfer.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this transfer.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this transfer.,
            format: uuid
          },
          transactionId: {
            type: string,
            description: The id of transaction this transfer is a part of.,
            format: uuid
          },
          sourceAmount: {
            type: number,
            description: The amount withdrawn from the source account.,
            format: double
          },
          sourceAccountId: {
            type: string,
            description: The id of the account from which currency is withdrawn from.,
            format: uuid
          },
          targetAmount: {
            type: number,
            description: The amount deposited in the target account.,
            format: double
          },
          targetAccountId: {
            type: string,
            description: The id of the account to which currency is deposited to.,
            format: uuid
          },
          bankReference: {
            type: string,
            description: The reference id issued by the bank.,
            nullable: true
          },
          externalReference: {
            type: string,
            description: The reference id issued by an external source.,
            nullable: true
          },
          internalReference: {
            type: string,
            description: The reference id issued by the user.,
            nullable: true
          },
          order: {
            type: integer,
            description: The order of the transfer within a transaction.,
            format: int32,
            nullable: true
          },
          bookedAt: {
            $ref: #/components/schemas/Instant
          },
          valuedAt: {
            $ref: #/components/schemas/Instant
          }
        },
        additionalProperties: false,
        description: A transfer between two accounts.
      },
      TransferCreation: {
        required: [
          bookedAt,
          sourceAccountId,
          sourceAmount,
          targetAccountId,
          targetAmount,
          transactionId,
          valuedAt
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          transactionId: {
            type: string,
            description: The id of transaction this transfer is a part of.,
            format: uuid
          },
          sourceAmount: {
            type: number,
            description: The amount withdrawn from the source account.,
            format: double
          },
          sourceAccountId: {
            type: string,
            description: The id of the account from which currency is withdrawn from.,
            format: uuid
          },
          targetAmount: {
            type: number,
            description: The amount deposited in the target account.,
            format: double
          },
          targetAccountId: {
            type: string,
            description: The id of the account to which currency is deposited to.,
            format: uuid
          },
          bankReference: {
            type: string,
            description: The reference id issued by the bank.,
            nullable: true
          },
          externalReference: {
            type: string,
            description: The reference id issued by an external source.,
            nullable: true
          },
          internalReference: {
            type: string,
            description: The reference id issued by the user.,
            nullable: true
          },
          order: {
            type: integer,
            description: The order of the transfer within a transaction.,
            format: int32,
            nullable: true
          },
          bookedAt: {
            $ref: #/components/schemas/Instant
          },
          valuedAt: {
            $ref: #/components/schemas/Instant
          }
        },
        additionalProperties: false,
        description: Information needed to create a transfer.
      },
      TransferReference: {
        type: object,
        properties: {
          created: {
            type: boolean,
            description: Whether or not the transfer was created during import.
          },
          transfer: {
            $ref: #/components/schemas/Transfer
          }
        },
        additionalProperties: false,
        description: A reference to an transfer that was used during import.
      },
      Unit: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the unit.,
            format: uuid
          },
          createdAt: {
            $ref: #/components/schemas/Instant
          },
          ownerId: {
            type: string,
            description: The id of the owner of the unit.,
            format: uuid
          },
          createdByUserId: {
            type: string,
            description: The id of the user that created this unit.,
            format: uuid
          },
          modifiedAt: {
            $ref: #/components/schemas/Instant
          },
          modifiedByUserId: {
            type: string,
            description: The id of the user that last modified this unit.,
            format: uuid
          },
          name: {
            type: string,
            description: The name of the unit.
          },
          symbol: {
            type: string,
            description: The symbol of the unit.,
            nullable: true
          },
          parentUnitId: {
            type: string,
            description: The id of the parent unit.,
            format: uuid,
            nullable: true
          },
          multiplier: {
            type: number,
            description: The multiplier to convert a value in this unit to the parent unit.,
            format: double,
            nullable: true
          },
          inverseMultiplier: {
            type: boolean,
            description: Whether Gnomeshade.WebApi.Models.Products.Unit.Multiplier needs to be inversed.
          }
        },
        additionalProperties: false,
        description: A unit of measure.
      },
      UnitCreation: {
        required: [
          multiplier,
          name,
          parentUnitId
        ],
        type: object,
        properties: {
          ownerId: {
            type: string,
            description: The id of the owner of the resource.,
            format: uuid,
            nullable: true
          },
          name: {
            minLength: 1,
            type: string,
            description: The name of the unit.
          },
          symbol: {
            type: string,
            description: The symbol of the unit.,
            nullable: true
          },
          parentUnitId: {
            type: string,
            description: The id of the parent unit.,
            format: uuid
          },
          multiplier: {
            type: number,
            description: The multiplier to convert a value in this unit to the parent unit.,
            format: double
          },
          inverseMultiplier: {
            type: boolean,
            description: Whether Gnomeshade.WebApi.Models.Products.Unit.Multiplier needs to be inversed.
          }
        },
        additionalProperties: false,
        description: The information needed to create or update a unit.
      },
      UserModel: {
        type: object,
        properties: {
          id: {
            type: string,
            description: The id of the user.
          },
          username: {
            type: string,
            description: The username of the user.
          },
          email: {
            type: string,
            description: The primary email address of the user.
          }
        },
        additionalProperties: false,
        description: Information about a user.
      },
      ValidationProblemDetails: {
        type: object,
        properties: {
          type: {
            type: string,
            nullable: true
          },
          title: {
            type: string,
            nullable: true
          },
          status: {
            type: integer,
            format: int32,
            default: 400,
            nullable: true
          },
          detail: {
            type: string,
            nullable: true
          },
          instance: {
            type: string,
            nullable: true
          },
          errors: {
            type: object,
            additionalProperties: {
              type: array,
              items: {
                type: string
              }
            }
          }
        }
      }
    },
    securitySchemes: {
      JWT: {
        type: http,
        description: JWT Authorization header using the Bearer scheme.,
        scheme: Bearer,
        bearerFormat: JWT
      }
    }
  },
  security: [
    {}
  ]
}
