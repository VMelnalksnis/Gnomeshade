#!/bin/bash

### BEGIN INIT INFO
# Provides:          gnomeshade
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Gnomeshade server
### END INIT INFO

# Source LSB helpers
. /lib/lsb/init-functions

# Process name (for display only)
NAME=gnomeshade

# Where is the actual executable for the daemon
DAEMON=/opt/gnomeshade/Gnomeshade.WebApi
WORKING_DIRECTORY=/etc/opt/gnomeshade

# The user:group under which the daemon must run
RUN_AS_USER=gnomeshade

# pid file for the daemon
PIDFILE=/var/run/gnomeshade.pid

# If the daemon is not there, then exit.
if ! [ -x ${DAEMON} ]
then
    log_failure_msg "Cannot find an executable at ${DAEMON}"
    exit 1
fi

case $1 in
    start)
        # Check if pidfile exists
        if [ -e ${PIDFILE} ]
        then
            # Check the actual status of process
            status_of_proc -p ${PIDFILE} ${DAEMON} ${NAME} && status="0" || status="$?"
            # If the status is successfully, no need to start again.
            [ "${status}" = "0" ] && exit 0
        fi
        # Start the daemon.
        log_daemon_msg "Starting ${NAME}"
        # Start the daemon with the help of start-stop-daemon
        if ASPNETCORE_WEBROOT=/opt/gnomeshade/wwwroot DOTNET_gcServer=0 start-stop-daemon --start --quiet --oknodo --pidfile ${PIDFILE} --make-pidfile --background \
                       --chuid ${RUN_AS_USER} --chdir ${WORKING_DIRECTORY} --no-close --startas ${DAEMON} -- --ENVIRONMENT=Production >> /var/log/gnomeshade
        then
            log_end_msg 0
        else
            log_end_msg 1
        fi
        ;;
    stop)
        if [ -e ${PIDFILE} ]
        then
            status_of_proc -p ${PIDFILE} ${DAEMON} ${NAME} && status="0" || status="$?"
            if [ "$status" = "0" ]; then
                log_daemon_msg "Stopping ${NAME}"
                if start-stop-daemon -K --signal TERM --quiet --oknodo --pidfile ${PIDFILE}
                then
                    log_end_msg 0
                    rm -rf ${PIDFILE}
                else
                    log_end_msg 1
                fi
            fi
        else
            log_daemon_msg "${NAME} is not running"
            log_end_msg 0
        fi
        ;;
    restart)
        $0 stop && sleep 3 && $0 start
        ;;
    status)
        # Check the status of the process.
        if [ -e ${PIDFILE} ]
        then
            status_of_proc -p ${PIDFILE} ${DAEMON} ${NAME} && exit 0 || exit $?
        else
            log_daemon_msg "${NAME} is not running (no pidfile)"
            log_end_msg 0
        fi
        ;;
    reload)
        if [ -e ${PIDFILE} ]; then
            log_daemon_msg "Reloading ${NAME}"
            if start-stop-daemon -K --quiet --signal HUP --pidfile ${PIDFILE}
            then
                log_end_msg 0
            else
                log_end_msg 1
            fi
        else
            log_failure_msg "Cannot find pidfile at ${PIDFILE}"
        fi
        ;;
    force-reload)
        if [ -e ${PIDFILE} ]; then
            log_daemon_msg "Reloading ${NAME}"
            if start-stop-daemon -K --quiet --signal HUP --pidfile ${PIDFILE}
            then
                log_end_msg 0
            else
                log_end_msg 1
            fi
        else
            log_failure_msg "Cannot find pidfile at ${PIDFILE}"
        fi
        ;;
    *)
        # Invalid argument, print the usage message.
        echo "Usage: $0 {start|stop|restart|reload|force-reload|status}"
        exit 2
        ;;
esac
